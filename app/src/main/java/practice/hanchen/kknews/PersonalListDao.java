package practice.hanchen.kknews;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import practice.hanchen.kknews.PersonalList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSONAL_LIST".
*/
public class PersonalListDao extends AbstractDao<PersonalList, Long> {

    public static final String TABLENAME = "PERSONAL_LIST";

    /**
     * Properties of entity PersonalList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FolderId = new Property(1, Integer.class, "folderId", false, "FOLDER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property PicURL = new Property(3, String.class, "picURL", false, "PIC_URL");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
    };


    public PersonalListDao(DaoConfig config) {
        super(config);
    }
    
    public PersonalListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSONAL_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FOLDER_ID\" INTEGER," + // 1: folderId
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"PIC_URL\" TEXT NOT NULL ," + // 3: picURL
                "\"DESCRIPTION\" TEXT NOT NULL );"); // 4: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSONAL_LIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonalList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer folderId = entity.getFolderId();
        if (folderId != null) {
            stmt.bindLong(2, folderId);
        }
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getPicURL());
        stmt.bindString(5, entity.getDescription());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PersonalList readEntity(Cursor cursor, int offset) {
        PersonalList entity = new PersonalList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // folderId
            cursor.getString(offset + 2), // title
            cursor.getString(offset + 3), // picURL
            cursor.getString(offset + 4) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonalList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFolderId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setPicURL(cursor.getString(offset + 3));
        entity.setDescription(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PersonalList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PersonalList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
